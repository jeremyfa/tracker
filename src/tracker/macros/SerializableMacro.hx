package tracker.macros;

import haxe.macro.Context;
import haxe.macro.Expr;

using StringTools;

class SerializableMacro {

    macro static public function build():Array<Field> {

        #if tracker_debug_macro
        trace(Context.getLocalClass() + ' -> BEGIN SerializableMacro.build()');
        #end

        var fields = Context.getBuildFields();
        var pos = Context.currentPos();
        var localClass = Context.getLocalClass().get();

        // Get next event index for this class path
        var classPath = localClass.pack != null && localClass.pack.length > 0 ? localClass.pack.join('.') + '.' + localClass.name : localClass.name;
        var nextEventIndex = EventsMacro._nextEventIndexes.exists(classPath) ? EventsMacro._nextEventIndexes.get(classPath) : 1;

        // Check if events should be dispatched dynamically by default on this class
        #if (!completion && !display)
        var dynamicDispatch = EventsMacro.hasDynamicEventsMeta(localClass.meta.get());
        #else
        var dynamicDispatch = false;
        #end

        // Check class fields
        var fieldsByName = new Map<String,Bool>();
        for (field in fields) {
            fieldsByName.set(field.name, true);
        }

        // Get entity type
        #if tracker_ceramic
        var entityTypeStr = 'ceramic.Entity';
        #else
        var entityTypeStr = TrackerMacro.entityTypeStr;
        if (entityTypeStr == null)
            entityTypeStr = 'tracker.Entity';
        #end

        // Also check parent fields
        var inheritsFromEntity = (classPath == entityTypeStr);
        var parentHold = localClass.superClass;
        var parent = parentHold != null ? parentHold.t : null;
        var numParents = 0;
        while (parent != null) {

            if (!inheritsFromEntity && parentHold.t.toString() == entityTypeStr) {
                inheritsFromEntity = true;
            }

            for (field in parent.get().fields.get()) {
                fieldsByName.set(field.name, true);
            }

            parentHold = parent.get().superClass;
            parent = parentHold != null ? parentHold.t : null;
            numParents++;
        }

        // In case of dynamic dispatch, check if event dispatcher
        // field was added already on current class fields
        var dispatcherName:String = null;
        if (dynamicDispatch) {
            dispatcherName = '__events' + numParents;
            if (!fieldsByName.exists(dispatcherName)) {
                EventsMacro.createEventDispatcherField(pos, fields, dispatcherName);
            }
        }

#if (!display && !completion)
        // Gather default values
        var defaultValueFields = [];
        var prefixLen = 'unobserved'.length;
        var used = new Map<String,Bool>();
        for (field in fields) {

            switch (field.kind) {

                case FVar(t, e), FProp(_, _, t, e):

                    // Remove any prefix generated by other tracker macros
                    var fieldName = field.name;
                    if (fieldName.startsWith('unobserved')) {
                        fieldName = fieldName.charAt(prefixLen).toLowerCase() + fieldName.substr(prefixLen + 1);
                    }

                    if (e != null && !used.exists(fieldName)) {
                        used.set(fieldName, true);

                        defaultValueFields.push({
                            pos: field.pos,
                            name: '_default_' + fieldName,
                            kind: FFun({
                                args: [],
                                ret: t,
                                expr: {
                                    expr: EReturn(e),
                                    pos: field.pos
                                }
                            }),
                            access: [APrivate],
                            doc: '',
                            meta: [{
                                name: ':noCompletion',
                                params: [],
                                pos: pos
                            }]
                        });
                    }


                default:
            }
        }
        fields = fields.concat(defaultValueFields);
#end

        if (!fieldsByName.exists('_serializeId')) {
            fields.push({
                pos: pos,
                name: '_serializeId',
                kind: FVar((macro :String), (macro tracker.Utils.uniqueId())),
                access: [APublic],
                doc: '',
                meta: [{
                    name: ':noCompletion',
                    params: [],
                    pos: pos
                }]
            });
        }

        // Add serialize/deserialize events
        if (!fieldsByName.exists('emitSerialize')) {
            var eventField = {
                pos: pos,
                name: 'serialize',
                kind: FFun({
                    args: [],
                    ret: macro :Void,
                    expr: null
                }),
                access: [],
                doc: 'Event when this object gets serialized.',
                meta: []
            };
            nextEventIndex = EventsMacro.createEventFields(eventField, fields, fields, fieldsByName, dynamicDispatch, nextEventIndex, dispatcherName, inheritsFromEntity);

            eventField = {
                pos: pos,
                name: 'deserialize',
                kind: FFun({
                    args: [],
                    ret: macro :Void,
                    expr: null
                }),
                access: [],
                doc: 'Event when this object gets deserialized.',
                meta: []
            };
            nextEventIndex = EventsMacro.createEventFields(eventField, fields, fields, fieldsByName, dynamicDispatch, nextEventIndex, dispatcherName, inheritsFromEntity);
        }

        // Store next event index for this class path
        EventsMacro._nextEventIndexes.set(classPath, nextEventIndex);

        #if tracker_debug_macro
        trace(Context.getLocalClass() + ' -> END SerializableMacro.build()');
        #end

        return fields;

    }

    static function hasSerializeMeta(field:Field):Bool {

        if (field.meta == null || field.meta.length == 0) return false;

        for (meta in field.meta) {
            if (meta.name == 'serialize') {
                return true;
            }
        }

        return false;

    }

}
